# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import owt_server_p2p_pb2 as owt__server__p2p__pb2


class LaunchStub(object):
    """The echo service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/owt_server_p2p.Launch/Start',
                request_serializer=owt__server__p2p__pb2.LaunchRequest.SerializeToString,
                response_deserializer=owt__server__p2p__pb2.Reply.FromString,
                )
        self.Terminate = channel.unary_unary(
                '/owt_server_p2p.Launch/Terminate',
                request_serializer=owt__server__p2p__pb2.TerminateRequest.SerializeToString,
                response_deserializer=owt__server__p2p__pb2.Reply.FromString,
                )


class LaunchServicer(object):
    """The echo service definition.
    """

    def Start(self, request, context):
        """Launch reply.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Terminate(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LaunchServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=owt__server__p2p__pb2.LaunchRequest.FromString,
                    response_serializer=owt__server__p2p__pb2.Reply.SerializeToString,
            ),
            'Terminate': grpc.unary_unary_rpc_method_handler(
                    servicer.Terminate,
                    request_deserializer=owt__server__p2p__pb2.TerminateRequest.FromString,
                    response_serializer=owt__server__p2p__pb2.Reply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'owt_server_p2p.Launch', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Launch(object):
    """The echo service definition.
    """

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/owt_server_p2p.Launch/Start',
            owt__server__p2p__pb2.LaunchRequest.SerializeToString,
            owt__server__p2p__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Terminate(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/owt_server_p2p.Launch/Terminate',
            owt__server__p2p__pb2.TerminateRequest.SerializeToString,
            owt__server__p2p__pb2.Reply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
